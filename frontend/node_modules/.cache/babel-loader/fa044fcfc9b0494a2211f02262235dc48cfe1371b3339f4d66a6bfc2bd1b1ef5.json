{"ast":null,"code":"// 创建taskCircle服务\n//const fetch = require('node-fetch');\n\n// 基础URL\nconst BASE_URL = 'http://localhost:5000';\n\n// 获取年份列表\nexport const getYears = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/task_circle/years`);\n    const data = await response.json();\n    // 确保返回的是一个数组\n    return Array.isArray(data) ? data : [];\n  } catch (error) {\n    console.error('获取年份列表失败:', error);\n    return [];\n  }\n};\n\n// 根据年份获取月份列表\nexport const getMonthsByYear = async year => {\n  try {\n    const response = await fetch(`${BASE_URL}/task_circle/months?year=${year}`);\n    const data = await response.json();\n    // 确保返回的是一个数组\n    return Array.isArray(data) ? data : [];\n  } catch (error) {\n    console.error('获取月份列表失败:', error);\n    return [];\n  }\n};\n\n// 根据年份和月份获取阶段列表\nexport const getPhasesByYearAndMonth = async (year, month) => {\n  try {\n    const response = await fetch(`${BASE_URL}/task_circle/phases?year=${year}&month=${month}`);\n    const data = await response.json();\n    // 确保返回的是一个数组\n    return Array.isArray(data) ? data : [];\n  } catch (error) {\n    console.error('获取阶段列表失败:', error);\n    return [];\n  }\n};\n\n// 检查年月阶段是否存在\nexport const checkYearMonthPhaseExists = async (year, month, phase) => {\n  try {\n    const response = await fetch(`${BASE_URL}/task_circle/check?year=${year}&month=${month}&phase=${phase}`);\n    return await response.json();\n  } catch (error) {\n    console.error('检查年月阶段失败:', error);\n    return true; // 发生错误时返回true，表示数据存在，防止误启用添加计划按钮\n  }\n};\n\n// 创建新的task_circle数据\nexport const createTaskCircle = async (year, month, phase) => {\n  try {\n    const response = await fetch(`${BASE_URL}/task_circle/create`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        year,\n        month,\n        phase\n      })\n    });\n    return await response.json();\n  } catch (error) {\n    console.error('创建task_circle数据失败:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","getYears","response","fetch","data","json","Array","isArray","error","console","getMonthsByYear","year","getPhasesByYearAndMonth","month","checkYearMonthPhaseExists","phase","createTaskCircle","method","headers","body","JSON","stringify"],"sources":["E:/TraeProjects/DevelopmentDashboard/frontend/src/services/taskCircleService.js"],"sourcesContent":["// 创建taskCircle服务\r\n//const fetch = require('node-fetch');\r\n\r\n// 基础URL\r\nconst BASE_URL = 'http://localhost:5000';\r\n\r\n// 获取年份列表\r\nexport const getYears = async () => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/task_circle/years`);\r\n    const data = await response.json();\r\n    // 确保返回的是一个数组\r\n    return Array.isArray(data) ? data : [];\r\n  } catch (error) {\r\n    console.error('获取年份列表失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 根据年份获取月份列表\r\nexport const getMonthsByYear = async (year) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/task_circle/months?year=${year}`);\r\n    const data = await response.json();\r\n    // 确保返回的是一个数组\r\n    return Array.isArray(data) ? data : [];\r\n  } catch (error) {\r\n    console.error('获取月份列表失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 根据年份和月份获取阶段列表\r\nexport const getPhasesByYearAndMonth = async (year, month) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/task_circle/phases?year=${year}&month=${month}`);\r\n    const data = await response.json();\r\n    // 确保返回的是一个数组\r\n    return Array.isArray(data) ? data : [];\r\n  } catch (error) {\r\n    console.error('获取阶段列表失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 检查年月阶段是否存在\r\nexport const checkYearMonthPhaseExists = async (year, month, phase) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/task_circle/check?year=${year}&month=${month}&phase=${phase}`);\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('检查年月阶段失败:', error);\r\n    return true; // 发生错误时返回true，表示数据存在，防止误启用添加计划按钮\r\n  }\r\n};\r\n\r\n// 创建新的task_circle数据\r\nexport const createTaskCircle = async (year, month, phase) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/task_circle/create`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        year,\r\n        month,\r\n        phase\r\n      })\r\n    });\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('创建task_circle数据失败:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA;AACA;;AAEA;AACA,MAAMA,QAAQ,GAAG,uBAAuB;;AAExC;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,oBAAoB,CAAC;IAC7D,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC;IACA,OAAOC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE;EACxC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAG,MAAOC,IAAI,IAAK;EAC7C,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,4BAA4BW,IAAI,EAAE,CAAC;IAC3E,MAAMP,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC;IACA,OAAOC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE;EACxC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,uBAAuB,GAAG,MAAAA,CAAOD,IAAI,EAAEE,KAAK,KAAK;EAC5D,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,4BAA4BW,IAAI,UAAUE,KAAK,EAAE,CAAC;IAC1F,MAAMT,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC;IACA,OAAOC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE;EACxC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,yBAAyB,GAAG,MAAAA,CAAOH,IAAI,EAAEE,KAAK,EAAEE,KAAK,KAAK;EACrE,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,2BAA2BW,IAAI,UAAUE,KAAK,UAAUE,KAAK,EAAE,CAAC;IACxG,OAAO,MAAMb,QAAQ,CAACG,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,IAAI,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,gBAAgB,GAAG,MAAAA,CAAOL,IAAI,EAAEE,KAAK,EAAEE,KAAK,KAAK;EAC5D,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,qBAAqB,EAAE;MAC7DiB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBV,IAAI;QACJE,KAAK;QACLE;MACF,CAAC;IACH,CAAC,CAAC;IACF,OAAO,MAAMb,QAAQ,CAACG,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}