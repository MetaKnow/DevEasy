{"ast":null,"code":"// 创建taskCircle服务\n//const fetch = require('node-fetch');\n// 基础URL\nconst BASE_URL='http://localhost:5000';// 获取年份列表\nexport const getYears=async()=>{try{const response=await fetch(`${BASE_URL}/task_circle/years`);const data=await response.json();// 确保返回的是一个数组\nreturn Array.isArray(data)?data:[];}catch(error){console.error('获取年份列表失败:',error);return[];}};// 根据年份获取月份列表\nexport const getMonthsByYear=async year=>{try{const response=await fetch(`${BASE_URL}/task_circle/months?year=${year}`);const data=await response.json();// 确保返回的是一个数组\nreturn Array.isArray(data)?data:[];}catch(error){console.error('获取月份列表失败:',error);return[];}};// 根据年份和月份获取阶段列表\nexport const getPhasesByYearAndMonth=async(year,month)=>{try{const response=await fetch(`${BASE_URL}/task_circle/phases?year=${year}&month=${month}`);const data=await response.json();// 确保返回的是一个数组\nreturn Array.isArray(data)?data:[];}catch(error){console.error('获取阶段列表失败:',error);return[];}};// 检查年月阶段是否存在\nexport const checkYearMonthPhaseExists=async(year,month,phase)=>{try{console.log('发送检查请求:',`${BASE_URL}/task_circle/check?year=${year}&month=${month}&phase=${phase}`);const response=await fetch(`${BASE_URL}/task_circle/check?year=${year}&month=${month}&phase=${phase}`);if(!response.ok){throw new Error(`服务器响应错误: ${response.status}`);}const data=await response.json();console.log('检查响应数据:',data);return data;}catch(error){console.error('检查年月阶段失败:',error);// 发生错误时返回true，表示数据存在，防止误启用添加计划按钮\nreturn true;}};// 创建新的task_circle数据\nexport const createTaskCircle=async(year,month,phase)=>{try{const response=await fetch(`${BASE_URL}/task_circle/create`,{method:'POST',headers:{'Content-Type':'application/json'// 确保有这个请求头\n},body:JSON.stringify({year,month,phase})});if(!response.ok){throw new Error(`服务器响应错误: ${response.status}`);}return await response.json();}catch(error){console.error('创建task_circle数据失败:',error);throw error;}};// 删除计划及其所有任务和步骤\nexport const deleteTaskCircle=async(year,month,phase)=>{try{const response=await fetch(`${BASE_URL}/task_circle/delete`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({year,month,phase})});if(!response.ok){throw new Error(`服务器响应错误: ${response.status}`);}return await response.json();}catch(error){console.error('删除计划失败:',error);throw error;}};","map":{"version":3,"names":["BASE_URL","getYears","response","fetch","data","json","Array","isArray","error","console","getMonthsByYear","year","getPhasesByYearAndMonth","month","checkYearMonthPhaseExists","phase","log","ok","Error","status","createTaskCircle","method","headers","body","JSON","stringify","deleteTaskCircle"],"sources":["E:/TraeProjects/DevelopmentDashboard/frontend/src/services/taskCircleService.js"],"sourcesContent":["// 创建taskCircle服务\r\n//const fetch = require('node-fetch');\r\n\r\n// 基础URL\r\nconst BASE_URL = 'http://localhost:5000';\r\n\r\n// 获取年份列表\r\nexport const getYears = async () => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/task_circle/years`);\r\n    const data = await response.json();\r\n    // 确保返回的是一个数组\r\n    return Array.isArray(data) ? data : [];\r\n  } catch (error) {\r\n    console.error('获取年份列表失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 根据年份获取月份列表\r\nexport const getMonthsByYear = async (year) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/task_circle/months?year=${year}`);\r\n    const data = await response.json();\r\n    // 确保返回的是一个数组\r\n    return Array.isArray(data) ? data : [];\r\n  } catch (error) {\r\n    console.error('获取月份列表失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 根据年份和月份获取阶段列表\r\nexport const getPhasesByYearAndMonth = async (year, month) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/task_circle/phases?year=${year}&month=${month}`);\r\n    const data = await response.json();\r\n    // 确保返回的是一个数组\r\n    return Array.isArray(data) ? data : [];\r\n  } catch (error) {\r\n    console.error('获取阶段列表失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 检查年月阶段是否存在\r\nexport const checkYearMonthPhaseExists = async (year, month, phase) => {\r\n  try {\r\n    console.log('发送检查请求:', `${BASE_URL}/task_circle/check?year=${year}&month=${month}&phase=${phase}`);\r\n    const response = await fetch(`${BASE_URL}/task_circle/check?year=${year}&month=${month}&phase=${phase}`);\r\n    if (!response.ok) {\r\n      throw new Error(`服务器响应错误: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    console.log('检查响应数据:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('检查年月阶段失败:', error);\r\n    // 发生错误时返回true，表示数据存在，防止误启用添加计划按钮\r\n    return true;\r\n  }\r\n};\r\n\r\n// 创建新的task_circle数据\r\nexport const createTaskCircle = async (year, month, phase) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/task_circle/create`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json' // 确保有这个请求头\r\n      },\r\n      body: JSON.stringify({\r\n        year,\r\n        month,\r\n        phase\r\n      })\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`服务器响应错误: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('创建task_circle数据失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 删除计划及其所有任务和步骤\r\nexport const deleteTaskCircle = async (year, month, phase) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/task_circle/delete`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        year,\r\n        month,\r\n        phase\r\n      })\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`服务器响应错误: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('删除计划失败:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}