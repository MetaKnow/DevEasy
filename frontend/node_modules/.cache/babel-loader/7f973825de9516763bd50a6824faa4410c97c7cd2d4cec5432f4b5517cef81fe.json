{"ast":null,"code":"// 访问控制配置\nconst accessConfig = {\n  // 是否开启跳转访问控制\n  enableRedirectAccess: false,\n  // 允许的来源系统地址\n  allowedReferrers: [\n    // 示例：'https://example.com',\n    // 'http://localhost:8080'\n  ],\n  // 访问被拒绝时的提示信息\n  accessDeniedMessage: '访问被拒绝：请通过指定系统跳转访问本系统',\n  // 检查访问权限\n  checkAccess: () => {\n    // 如果未开启跳转访问控制，直接允许访问\n    if (!accessConfig.enableRedirectAccess) {\n      return true;\n    }\n\n    // 检查referrer\n    const referrer = document.referrer;\n\n    // 如果没有referrer（直接访问），拒绝访问\n    if (!referrer) {\n      return false;\n    }\n\n    // 检查referrer是否在允许列表中\n    return accessConfig.allowedReferrers.some(allowedReferrer => {\n      try {\n        const referrerUrl = new URL(referrer);\n        const allowedUrl = new URL(allowedReferrer);\n        return referrerUrl.origin === allowedUrl.origin;\n      } catch (error) {\n        console.error('URL解析错误:', error);\n        return false;\n      }\n    });\n  },\n  // 更新配置\n  updateConfig: newConfig => {\n    Object.assign(accessConfig, newConfig);\n    // 保存到localStorage\n    localStorage.setItem('accessConfig', JSON.stringify({\n      enableRedirectAccess: accessConfig.enableRedirectAccess,\n      allowedReferrers: accessConfig.allowedReferrers,\n      accessDeniedMessage: accessConfig.accessDeniedMessage\n    }));\n  },\n  // 从localStorage加载配置\n  loadConfig: () => {\n    try {\n      const savedConfig = localStorage.getItem('accessConfig');\n      if (savedConfig) {\n        const config = JSON.parse(savedConfig);\n        Object.assign(accessConfig, config);\n      }\n    } catch (error) {\n      console.error('加载访问配置失败:', error);\n    }\n  }\n};\n\n// 初始化时加载配置\naccessConfig.loadConfig();\nexport default accessConfig;","map":{"version":3,"names":["accessConfig","enableRedirectAccess","allowedReferrers","accessDeniedMessage","checkAccess","referrer","document","some","allowedReferrer","referrerUrl","URL","allowedUrl","origin","error","console","updateConfig","newConfig","Object","assign","localStorage","setItem","JSON","stringify","loadConfig","savedConfig","getItem","config","parse"],"sources":["E:/TraeProjects/DevelopmentDashboard/frontend/src/config/accessConfig.js"],"sourcesContent":["// 访问控制配置\nconst accessConfig = {\n  // 是否开启跳转访问控制\n  enableRedirectAccess: false,\n  \n  // 允许的来源系统地址\n  allowedReferrers: [\n    // 示例：'https://example.com',\n    // 'http://localhost:8080'\n  ],\n  \n  // 访问被拒绝时的提示信息\n  accessDeniedMessage: '访问被拒绝：请通过指定系统跳转访问本系统',\n  \n  // 检查访问权限\n  checkAccess: () => {\n    // 如果未开启跳转访问控制，直接允许访问\n    if (!accessConfig.enableRedirectAccess) {\n      return true;\n    }\n    \n    // 检查referrer\n    const referrer = document.referrer;\n    \n    // 如果没有referrer（直接访问），拒绝访问\n    if (!referrer) {\n      return false;\n    }\n    \n    // 检查referrer是否在允许列表中\n    return accessConfig.allowedReferrers.some(allowedReferrer => {\n      try {\n        const referrerUrl = new URL(referrer);\n        const allowedUrl = new URL(allowedReferrer);\n        return referrerUrl.origin === allowedUrl.origin;\n      } catch (error) {\n        console.error('URL解析错误:', error);\n        return false;\n      }\n    });\n  },\n  \n  // 更新配置\n  updateConfig: (newConfig) => {\n    Object.assign(accessConfig, newConfig);\n    // 保存到localStorage\n    localStorage.setItem('accessConfig', JSON.stringify({\n      enableRedirectAccess: accessConfig.enableRedirectAccess,\n      allowedReferrers: accessConfig.allowedReferrers,\n      accessDeniedMessage: accessConfig.accessDeniedMessage\n    }));\n  },\n  \n  // 从localStorage加载配置\n  loadConfig: () => {\n    try {\n      const savedConfig = localStorage.getItem('accessConfig');\n      if (savedConfig) {\n        const config = JSON.parse(savedConfig);\n        Object.assign(accessConfig, config);\n      }\n    } catch (error) {\n      console.error('加载访问配置失败:', error);\n    }\n  }\n};\n\n// 初始化时加载配置\naccessConfig.loadConfig();\n\nexport default accessConfig;"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG;EACnB;EACAC,oBAAoB,EAAE,KAAK;EAE3B;EACAC,gBAAgB,EAAE;IAChB;IACA;EAAA,CACD;EAED;EACAC,mBAAmB,EAAE,sBAAsB;EAE3C;EACAC,WAAW,EAAEA,CAAA,KAAM;IACjB;IACA,IAAI,CAACJ,YAAY,CAACC,oBAAoB,EAAE;MACtC,OAAO,IAAI;IACb;;IAEA;IACA,MAAMI,QAAQ,GAAGC,QAAQ,CAACD,QAAQ;;IAElC;IACA,IAAI,CAACA,QAAQ,EAAE;MACb,OAAO,KAAK;IACd;;IAEA;IACA,OAAOL,YAAY,CAACE,gBAAgB,CAACK,IAAI,CAACC,eAAe,IAAI;MAC3D,IAAI;QACF,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAACL,QAAQ,CAAC;QACrC,MAAMM,UAAU,GAAG,IAAID,GAAG,CAACF,eAAe,CAAC;QAC3C,OAAOC,WAAW,CAACG,MAAM,KAAKD,UAAU,CAACC,MAAM;MACjD,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;QAChC,OAAO,KAAK;MACd;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAE,YAAY,EAAGC,SAAS,IAAK;IAC3BC,MAAM,CAACC,MAAM,CAAClB,YAAY,EAAEgB,SAAS,CAAC;IACtC;IACAG,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAAC;MAClDrB,oBAAoB,EAAED,YAAY,CAACC,oBAAoB;MACvDC,gBAAgB,EAAEF,YAAY,CAACE,gBAAgB;MAC/CC,mBAAmB,EAAEH,YAAY,CAACG;IACpC,CAAC,CAAC,CAAC;EACL,CAAC;EAED;EACAoB,UAAU,EAAEA,CAAA,KAAM;IAChB,IAAI;MACF,MAAMC,WAAW,GAAGL,YAAY,CAACM,OAAO,CAAC,cAAc,CAAC;MACxD,IAAID,WAAW,EAAE;QACf,MAAME,MAAM,GAAGL,IAAI,CAACM,KAAK,CAACH,WAAW,CAAC;QACtCP,MAAM,CAACC,MAAM,CAAClB,YAAY,EAAE0B,MAAM,CAAC;MACrC;IACF,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACnC;EACF;AACF,CAAC;;AAED;AACAb,YAAY,CAACuB,UAAU,CAAC,CAAC;AAEzB,eAAevB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}