{"ast":null,"code":"// 基础URL\nexport const BASE_URL = 'http://localhost:5000';\n\n// 获取任务列表\nexport const getTasks = async taskCircleId => {\n  try {\n    const response = await fetch(`${BASE_URL}/tasks?task_circle_id=${taskCircleId}`);\n    const data = await response.json();\n    return Array.isArray(data) ? data : [];\n  } catch (error) {\n    console.error('获取任务列表失败:', error);\n    return [];\n  }\n};\n\n// 创建新任务\nexport const createTask = async (taskName, taskCircleId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/tasks/create`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        task_name: taskName,\n        task_circle_id: taskCircleId\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`服务器响应错误: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('创建任务失败:', error);\n    throw error;\n  }\n};\n\n// 创建新步骤\nexport const createStep = async (stepData, taskId, taskCircleId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/steps/create`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ...stepData,\n        task_id: taskId,\n        task_circle_id: taskCircleId\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`服务器响应错误: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('创建步骤失败:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","getTasks","taskCircleId","response","fetch","data","json","Array","isArray","error","console","createTask","taskName","method","headers","body","JSON","stringify","task_name","task_circle_id","ok","Error","status","createStep","stepData","taskId","task_id"],"sources":["E:/TraeProjects/DevelopmentDashboard/frontend/src/services/taskService.js"],"sourcesContent":["// 基础URL\r\nexport const BASE_URL = 'http://localhost:5000';\r\n\r\n// 获取任务列表\r\nexport const getTasks = async (taskCircleId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/tasks?task_circle_id=${taskCircleId}`);\r\n    const data = await response.json();\r\n    return Array.isArray(data) ? data : [];\r\n  } catch (error) {\r\n    console.error('获取任务列表失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 创建新任务\r\nexport const createTask = async (taskName, taskCircleId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/tasks/create`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        task_name: taskName,\r\n        task_circle_id: taskCircleId\r\n      })\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`服务器响应错误: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('创建任务失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 创建新步骤\r\nexport const createStep = async (stepData, taskId, taskCircleId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/steps/create`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        ...stepData,\r\n        task_id: taskId,\r\n        task_circle_id: taskCircleId\r\n      })\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`服务器响应错误: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('创建步骤失败:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,QAAQ,GAAG,uBAAuB;;AAE/C;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAOC,YAAY,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,yBAAyBE,YAAY,EAAE,CAAC;IAChF,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE;EACxC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEV,YAAY,KAAK;EAC1D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,eAAe,EAAE;MACvDa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,SAAS,EAAEN,QAAQ;QACnBO,cAAc,EAAEjB;MAClB,CAAC;IACH,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACiB,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,YAAYlB,QAAQ,CAACmB,MAAM,EAAE,CAAC;IAChD;IACA,OAAO,MAAMnB,QAAQ,CAACG,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IAC/B,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMc,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,EAAEvB,YAAY,KAAK;EAClE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,eAAe,EAAE;MACvDa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnB,GAAGO,QAAQ;QACXE,OAAO,EAAED,MAAM;QACfN,cAAc,EAAEjB;MAClB,CAAC;IACH,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACiB,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,YAAYlB,QAAQ,CAACmB,MAAM,EAAE,CAAC;IAChD;IACA,OAAO,MAAMnB,QAAQ,CAACG,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IAC/B,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}