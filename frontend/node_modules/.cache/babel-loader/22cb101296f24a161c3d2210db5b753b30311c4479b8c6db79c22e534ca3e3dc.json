{"ast":null,"code":"// 基础URL\nconst BASE_URL = 'http://localhost:5000';\n\n// 根据年、月、阶段获取任务和步骤\nexport const getTasksByYearMonthPhase = async (year, month, phase) => {\n  try {\n    const response = await fetch(`${BASE_URL}/tasks?year=${year}&month=${month}&phase=${phase}`);\n    if (!response.ok) {\n      throw new Error(`服务器响应错误: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('获取任务和步骤数据失败:', error);\n    throw error;\n  }\n};\n\n// 添加新任务\nexport const addTask = async (taskName, year, month, phase) => {\n  try {\n    const response = await fetch(`${BASE_URL}/tasks/create`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        task_name: taskName,\n        year,\n        month,\n        phase\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`服务器响应错误: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('添加任务失败:', error);\n    throw error;\n  }\n};\n\n// 添加新步骤\nexport const addStep = async (taskId, stepData, year, month, phase) => {\n  try {\n    const response = await fetch(`${BASE_URL}/steps/create`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        task_id: taskId,\n        ...stepData,\n        year,\n        month,\n        phase\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`服务器响应错误: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('添加步骤失败:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","getTasksByYearMonthPhase","year","month","phase","response","fetch","ok","Error","status","json","error","console","addTask","taskName","method","headers","body","JSON","stringify","task_name","addStep","taskId","stepData","task_id"],"sources":["E:/TraeProjects/DevelopmentDashboard/frontend/src/services/taskService.js"],"sourcesContent":["// 基础URL\r\nconst BASE_URL = 'http://localhost:5000';\r\n\r\n// 根据年、月、阶段获取任务和步骤\r\nexport const getTasksByYearMonthPhase = async (year, month, phase) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/tasks?year=${year}&month=${month}&phase=${phase}`);\r\n    if (!response.ok) {\r\n      throw new Error(`服务器响应错误: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('获取任务和步骤数据失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 添加新任务\r\nexport const addTask = async (taskName, year, month, phase) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/tasks/create`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        task_name: taskName,\r\n        year,\r\n        month,\r\n        phase\r\n      })\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`服务器响应错误: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('添加任务失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 添加新步骤\r\nexport const addStep = async (taskId, stepData, year, month, phase) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/steps/create`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        task_id: taskId,\r\n        ...stepData,\r\n        year,\r\n        month,\r\n        phase\r\n      })\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`服务器响应错误: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('添加步骤失败:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,uBAAuB;;AAExC;AACA,OAAO,MAAMC,wBAAwB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACpE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,eAAeE,IAAI,UAAUC,KAAK,UAAUC,KAAK,EAAE,CAAC;IAC5F,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,YAAYH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAChD;IACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,OAAO,GAAG,MAAAA,CAAOC,QAAQ,EAAEZ,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAK;EAC7D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,eAAe,EAAE;MACvDe,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,SAAS,EAAEN,QAAQ;QACnBZ,IAAI;QACJC,KAAK;QACLC;MACF,CAAC;IACH,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,YAAYH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAChD;IACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IAC/B,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG,MAAAA,CAAOC,MAAM,EAAEC,QAAQ,EAAErB,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACrE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,eAAe,EAAE;MACvDe,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBK,OAAO,EAAEF,MAAM;QACf,GAAGC,QAAQ;QACXrB,IAAI;QACJC,KAAK;QACLC;MACF,CAAC;IACH,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,YAAYH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAChD;IACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IAC/B,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}