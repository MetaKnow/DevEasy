{"ast":null,"code":"// 访问控制配置\n// 直接在此文件中修改配置即可\nconst accessConfig = {\n  // 是否开启跳转访问控制\n  // false: 允许直接访问\n  // true: 只允许从指定系统跳转访问\n  enableRedirectAccess: false,\n  // 允许的来源系统地址列表\n  // 当 enableRedirectAccess 为 true 时生效\n  // 示例：['https://example.com', 'http://localhost:8080']\n  allowedReferrers: [\n  // 在此处添加允许的来源系统地址\n  // 'https://your-system.com',\n  // 'http://localhost:3001'\n  'http://127.0.0.1:8080/'],\n  // 访问被拒绝时的提示信息\n  accessDeniedMessage: '访问被拒绝：请通过指定系统跳转访问本系统',\n  // 检查访问权限（内部方法，无需修改）\n  checkAccess: () => {\n    // 如果未开启跳转访问控制，直接允许访问\n    if (!accessConfig.enableRedirectAccess) {\n      return true;\n    }\n\n    // 检查referrer\n    const referrer = document.referrer;\n\n    // 如果没有referrer（直接访问），拒绝访问\n    if (!referrer) {\n      return false;\n    }\n\n    // 检查referrer是否在允许列表中\n    return accessConfig.allowedReferrers.some(allowedReferrer => {\n      try {\n        const referrerUrl = new URL(referrer);\n        const allowedUrl = new URL(allowedReferrer);\n        return referrerUrl.origin === allowedUrl.origin;\n      } catch (error) {\n        console.error('URL解析错误:', error);\n        return false;\n      }\n    });\n  }\n};\nexport default accessConfig;","map":{"version":3,"names":["accessConfig","enableRedirectAccess","allowedReferrers","accessDeniedMessage","checkAccess","referrer","document","some","allowedReferrer","referrerUrl","URL","allowedUrl","origin","error","console"],"sources":["E:/TraeProjects/DevelopmentDashboard/frontend/src/config/accessConfig.js"],"sourcesContent":["// 访问控制配置\n// 直接在此文件中修改配置即可\nconst accessConfig = {\n  // 是否开启跳转访问控制\n  // false: 允许直接访问\n  // true: 只允许从指定系统跳转访问\n  enableRedirectAccess: false,\n  \n  // 允许的来源系统地址列表\n  // 当 enableRedirectAccess 为 true 时生效\n  // 示例：['https://example.com', 'http://localhost:8080']\n  allowedReferrers: [\n    // 在此处添加允许的来源系统地址\n    // 'https://your-system.com',\n    // 'http://localhost:3001'\n    'http://127.0.0.1:8080/'\n  ],\n  \n  // 访问被拒绝时的提示信息\n  accessDeniedMessage: '访问被拒绝：请通过指定系统跳转访问本系统',\n  \n  // 检查访问权限（内部方法，无需修改）\n  checkAccess: () => {\n    // 如果未开启跳转访问控制，直接允许访问\n    if (!accessConfig.enableRedirectAccess) {\n      return true;\n    }\n    \n    // 检查referrer\n    const referrer = document.referrer;\n    \n    // 如果没有referrer（直接访问），拒绝访问\n    if (!referrer) {\n      return false;\n    }\n    \n    // 检查referrer是否在允许列表中\n    return accessConfig.allowedReferrers.some(allowedReferrer => {\n      try {\n        const referrerUrl = new URL(referrer);\n        const allowedUrl = new URL(allowedReferrer);\n        return referrerUrl.origin === allowedUrl.origin;\n      } catch (error) {\n        console.error('URL解析错误:', error);\n        return false;\n      }\n    });\n  }\n};\n\nexport default accessConfig;"],"mappings":"AAAA;AACA;AACA,MAAMA,YAAY,GAAG;EACnB;EACA;EACA;EACAC,oBAAoB,EAAE,KAAK;EAE3B;EACA;EACA;EACAC,gBAAgB,EAAE;EAChB;EACA;EACA;EACA,wBAAwB,CACzB;EAED;EACAC,mBAAmB,EAAE,sBAAsB;EAE3C;EACAC,WAAW,EAAEA,CAAA,KAAM;IACjB;IACA,IAAI,CAACJ,YAAY,CAACC,oBAAoB,EAAE;MACtC,OAAO,IAAI;IACb;;IAEA;IACA,MAAMI,QAAQ,GAAGC,QAAQ,CAACD,QAAQ;;IAElC;IACA,IAAI,CAACA,QAAQ,EAAE;MACb,OAAO,KAAK;IACd;;IAEA;IACA,OAAOL,YAAY,CAACE,gBAAgB,CAACK,IAAI,CAACC,eAAe,IAAI;MAC3D,IAAI;QACF,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAACL,QAAQ,CAAC;QACrC,MAAMM,UAAU,GAAG,IAAID,GAAG,CAACF,eAAe,CAAC;QAC3C,OAAOC,WAAW,CAACG,MAAM,KAAKD,UAAU,CAACC,MAAM;MACjD,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;QAChC,OAAO,KAAK;MACd;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AAED,eAAeb,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}