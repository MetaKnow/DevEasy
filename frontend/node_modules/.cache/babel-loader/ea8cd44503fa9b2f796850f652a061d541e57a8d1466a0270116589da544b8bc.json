{"ast":null,"code":"// 基础URL\nexport const BASE_URL = 'http://192.168.0.115:5000';\n\n// 获取任务列表\nexport const getTasks = async taskCircleId => {\n  try {\n    const response = await fetch(`${BASE_URL}/tasks?task_circle_id=${taskCircleId}`);\n    const data = await response.json();\n    return Array.isArray(data) ? data : [];\n  } catch (error) {\n    console.error('获取任务列表失败:', error);\n    return [];\n  }\n};\n\n// 创建新任务\nexport const createTask = async (taskName, taskCircleId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/tasks/create`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        task_name: taskName,\n        task_circle_id: taskCircleId\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`服务器响应错误: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('创建任务失败:', error);\n    throw error;\n  }\n};\n\n// 创建新步骤\nexport const createStep = async (stepData, taskId, task_circle_id) => {\n  console.log('创建步骤参数:', stepData, taskId, task_circle_id);\n  try {\n    // 处理日期字段，将空字符串转为null\n    const processedStepData = {\n      ...stepData,\n      startdate: stepData.startdate || null,\n      enddate: stepData.enddate || null\n    };\n    const response = await fetch('http://localhost:5000/dashboard/create', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ...processedStepData,\n        task_id: taskId,\n        task_circle_id: task_circle_id\n      })\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('添加步骤失败:', response.status, errorText);\n      throw new Error(`添加步骤失败: ${response.status} ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('创建步骤成功:', data);\n    return data;\n  } catch (error) {\n    console.error('添加步骤失败:', error);\n    throw error;\n  }\n};\n\n// 更新步骤\n// 更新步骤\nexport const updateStep = async (stepId, updatedData) => {\n  console.log('更新步骤参数:', stepId, updatedData);\n  try {\n    // 处理日期字段，但保留枚举字段原值\n    const processedData = {\n      ...updatedData,\n      startdate: updatedData.startdate || null,\n      enddate: updatedData.enddate || null\n      // 不要转换iscomplete和islate字段\n    };\n    const response = await fetch(`${BASE_URL}/dashboard/${stepId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(processedData)\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('更新步骤失败:', response.status, errorText);\n      throw new Error(`更新步骤失败: ${response.status} ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('更新步骤成功:', data);\n    return data;\n  } catch (error) {\n    console.error('更新步骤失败:', error);\n    throw error;\n  }\n};\n\n// 更新任务\nexport const updateTask = async (taskId, updatedData) => {\n  console.log('更新任务参数:', taskId, updatedData);\n  try {\n    const response = await fetch(`${BASE_URL}/tasks/${taskId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedData)\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('更新任务失败:', response.status, errorText);\n      throw new Error(`更新任务失败: ${response.status} ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('更新任务成功:', data);\n    return data;\n  } catch (error) {\n    console.error('更新任务失败:', error);\n    throw error;\n  }\n};\n\n// 删除步骤\nexport const deleteStep = async stepId => {\n  console.log('删除步骤参数:', stepId);\n  try {\n    const response = await fetch(`${BASE_URL}/dashboard/${stepId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('删除步骤失败:', response.status, errorText);\n      throw new Error(`删除步骤失败: ${response.status} ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('删除步骤成功:', data);\n    return data;\n  } catch (error) {\n    console.error('删除步骤失败:', error);\n    throw error;\n  }\n};\n\n// 删除任务\nexport const deleteTask = async taskId => {\n  try {\n    const response = await fetch(`${BASE_URL}/tasks/${taskId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('删除任务失败');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('删除任务失败:', error);\n    throw error;\n  }\n};\n\n// 获取任务圈统计数据\nexport const getTaskCircleStats = async taskCircleId => {\n  try {\n    const response = await fetch(`${BASE_URL}/task_circle/stats?id=${taskCircleId}`);\n    if (!response.ok) throw new Error('获取统计数据失败');\n    return await response.json();\n  } catch (error) {\n    console.error('获取统计数据失败:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["BASE_URL","getTasks","taskCircleId","response","fetch","data","json","Array","isArray","error","console","createTask","taskName","method","headers","body","JSON","stringify","task_name","task_circle_id","ok","Error","status","createStep","stepData","taskId","log","processedStepData","startdate","enddate","task_id","errorText","text","updateStep","stepId","updatedData","processedData","updateTask","deleteStep","deleteTask","getTaskCircleStats"],"sources":["E:/TraeProjects/DevelopmentDashboard/frontend/src/services/taskService.js"],"sourcesContent":["// 基础URL\r\nexport const BASE_URL = 'http://192.168.0.115:5000';\r\n\r\n// 获取任务列表\r\nexport const getTasks = async (taskCircleId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/tasks?task_circle_id=${taskCircleId}`);\r\n    const data = await response.json();\r\n    return Array.isArray(data) ? data : [];\r\n  } catch (error) {\r\n    console.error('获取任务列表失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 创建新任务\r\nexport const createTask = async (taskName, taskCircleId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/tasks/create`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        task_name: taskName,\r\n        task_circle_id: taskCircleId\r\n      })\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`服务器响应错误: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('创建任务失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 创建新步骤\r\nexport const createStep = async (stepData, taskId, task_circle_id) => {\r\n  console.log('创建步骤参数:', stepData, taskId, task_circle_id);\r\n  try {\r\n    // 处理日期字段，将空字符串转为null\r\n    const processedStepData = {\r\n      ...stepData,\r\n      startdate: stepData.startdate || null,\r\n      enddate: stepData.enddate || null\r\n    };\r\n\r\n    const response = await fetch('http://localhost:5000/dashboard/create', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        ...processedStepData,\r\n        task_id: taskId,\r\n        task_circle_id: task_circle_id\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('添加步骤失败:', response.status, errorText);\r\n      throw new Error(`添加步骤失败: ${response.status} ${errorText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('创建步骤成功:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('添加步骤失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 更新步骤\r\n// 更新步骤\r\nexport const updateStep = async (stepId, updatedData) => {\r\n  console.log('更新步骤参数:', stepId, updatedData);\r\n  try {\r\n    // 处理日期字段，但保留枚举字段原值\r\n    const processedData = {\r\n      ...updatedData,\r\n      startdate: updatedData.startdate || null,\r\n      enddate: updatedData.enddate || null\r\n      // 不要转换iscomplete和islate字段\r\n    };\r\n\r\n    const response = await fetch(`${BASE_URL}/dashboard/${stepId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(processedData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('更新步骤失败:', response.status, errorText);\r\n      throw new Error(`更新步骤失败: ${response.status} ${errorText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('更新步骤成功:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('更新步骤失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 更新任务\r\nexport const updateTask = async (taskId, updatedData) => {\r\n  console.log('更新任务参数:', taskId, updatedData);\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/tasks/${taskId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(updatedData)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('更新任务失败:', response.status, errorText);\r\n      throw new Error(`更新任务失败: ${response.status} ${errorText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('更新任务成功:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('更新任务失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 删除步骤\r\nexport const deleteStep = async (stepId) => {\r\n  console.log('删除步骤参数:', stepId);\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/dashboard/${stepId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('删除步骤失败:', response.status, errorText);\r\n      throw new Error(`删除步骤失败: ${response.status} ${errorText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('删除步骤成功:', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('删除步骤失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 删除任务\r\nexport const deleteTask = async (taskId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/tasks/${taskId}`, {\r\n      method: 'DELETE'\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('删除任务失败');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('删除任务失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 获取任务圈统计数据\r\nexport const getTaskCircleStats = async (taskCircleId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/task_circle/stats?id=${taskCircleId}`);\r\n    if (!response.ok) throw new Error('获取统计数据失败');\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('获取统计数据失败:', error);\r\n    return null;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}